// Generated by Dagger (https://google.github.io/dagger).
package com.nytimes.articles.di.components;

import android.app.Activity;
import android.app.Application;
import android.arch.lifecycle.ViewModel;
import android.support.v4.app.Fragment;
import com.nytimes.articles.NYTimesApp;
import com.nytimes.articles.NYTimesApp_MembersInjector;
import com.nytimes.articles.data.local.ArticleDatabase;
import com.nytimes.articles.data.local.dao.ArticleDao;
import com.nytimes.articles.data.remote.ApiService;
import com.nytimes.articles.data.remote.repository.ArticleRepository_Factory;
import com.nytimes.articles.di.builder.ActivityBuilderModule_MainActivity;
import com.nytimes.articles.di.builder.FragmentBuilderModule_ContributeArticleDetailFragment;
import com.nytimes.articles.di.builder.FragmentBuilderModule_ContributeArticleListFragment;
import com.nytimes.articles.di.module.AppModule;
import com.nytimes.articles.di.module.AppModule_ProvideArticleDaoFactory;
import com.nytimes.articles.di.module.AppModule_ProvideArticleDatabaseFactory;
import com.nytimes.articles.di.module.AppModule_ProvideOkHttpClientFactory;
import com.nytimes.articles.di.module.AppModule_ProvideRetrofitFactory;
import com.nytimes.articles.view.activity.MainActivity;
import com.nytimes.articles.view.base.BaseActivity_MembersInjector;
import com.nytimes.articles.view.base.BaseFragment_MembersInjector;
import com.nytimes.articles.view.fragment.ArticleDetailFragment;
import com.nytimes.articles.view.fragment.ArticleListFragment;
import com.nytimes.articles.viewmodel.ArticleDetailsViewModel;
import com.nytimes.articles.viewmodel.ArticleDetailsViewModel_Factory;
import com.nytimes.articles.viewmodel.ArticleListViewModel;
import com.nytimes.articles.viewmodel.ArticleListViewModel_Factory;
import com.nytimes.articles.viewmodel.ViewModelFactory;
import com.nytimes.articles.viewmodel.ViewModelFactory_Factory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.MapProviderFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import okhttp3.OkHttpClient;

public final class DaggerAppComponent implements AppComponent {
  private Provider<ActivityBuilderModule_MainActivity.MainActivitySubcomponent.Builder>
      mainActivitySubcomponentBuilderProvider;

  private Provider<Application> applicationProvider;

  private Provider<ArticleDatabase> provideArticleDatabaseProvider;

  private Provider<ArticleDao> provideArticleDaoProvider;

  private Provider<OkHttpClient> provideOkHttpClientProvider;

  private Provider<ApiService> provideRetrofitProvider;

  private ArticleRepository_Factory articleRepositoryProvider;

  private ArticleListViewModel_Factory articleListViewModelProvider;

  private ArticleDetailsViewModel_Factory articleDetailsViewModelProvider;

  private Provider<Map<Class<? extends ViewModel>, Provider<ViewModel>>>
      mapOfClassOfAndProviderOfViewModelProvider;

  private Provider<ViewModelFactory> viewModelFactoryProvider;

  private DaggerAppComponent(Builder builder) {
    initialize(builder);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
      getMapOfClassOfAndProviderOfFactoryOf() {
    return Collections
        .<Class<? extends Activity>, Provider<AndroidInjector.Factory<? extends Activity>>>
            singletonMap(MainActivity.class, (Provider) mainActivitySubcomponentBuilderProvider);
  }

  private DispatchingAndroidInjector<Activity> getDispatchingAndroidInjectorOfActivity() {
    return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
        getMapOfClassOfAndProviderOfFactoryOf());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final Builder builder) {
    this.mainActivitySubcomponentBuilderProvider =
        new Provider<ActivityBuilderModule_MainActivity.MainActivitySubcomponent.Builder>() {
          @Override
          public ActivityBuilderModule_MainActivity.MainActivitySubcomponent.Builder get() {
            return new MainActivitySubcomponentBuilder();
          }
        };
    this.applicationProvider = InstanceFactory.create(builder.application);
    this.provideArticleDatabaseProvider =
        DoubleCheck.provider(
            AppModule_ProvideArticleDatabaseFactory.create(builder.appModule, applicationProvider));
    this.provideArticleDaoProvider =
        DoubleCheck.provider(
            AppModule_ProvideArticleDaoFactory.create(
                builder.appModule, provideArticleDatabaseProvider));
    this.provideOkHttpClientProvider =
        DoubleCheck.provider(AppModule_ProvideOkHttpClientFactory.create(builder.appModule));
    this.provideRetrofitProvider =
        DoubleCheck.provider(
            AppModule_ProvideRetrofitFactory.create(
                builder.appModule, provideOkHttpClientProvider));
    this.articleRepositoryProvider =
        ArticleRepository_Factory.create(provideArticleDaoProvider, provideRetrofitProvider);
    this.articleListViewModelProvider =
        ArticleListViewModel_Factory.create(articleRepositoryProvider);
    this.articleDetailsViewModelProvider =
        ArticleDetailsViewModel_Factory.create(articleRepositoryProvider);
    this.mapOfClassOfAndProviderOfViewModelProvider =
        MapProviderFactory.<Class<? extends ViewModel>, ViewModel>builder(2)
            .put(ArticleListViewModel.class, (Provider) articleListViewModelProvider)
            .put(ArticleDetailsViewModel.class, (Provider) articleDetailsViewModelProvider)
            .build();
    this.viewModelFactoryProvider =
        DoubleCheck.provider(
            ViewModelFactory_Factory.create(mapOfClassOfAndProviderOfViewModelProvider));
  }

  @Override
  public void inject(NYTimesApp nyTimesApp) {
    injectNYTimesApp(nyTimesApp);
  }

  private NYTimesApp injectNYTimesApp(NYTimesApp instance) {
    NYTimesApp_MembersInjector.injectActivityDispatchingInjector(
        instance, getDispatchingAndroidInjectorOfActivity());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private AppModule appModule;

    private Application application;

    @Override
    public AppComponent build() {
      if (appModule == null) {
        this.appModule = new AppModule();
      }
      if (application == null) {
        throw new IllegalStateException(Application.class.getCanonicalName() + " must be set");
      }
      return new DaggerAppComponent(this);
    }

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }
  }

  private final class MainActivitySubcomponentBuilder
      extends ActivityBuilderModule_MainActivity.MainActivitySubcomponent.Builder {
    private MainActivity seedInstance;

    @Override
    public ActivityBuilderModule_MainActivity.MainActivitySubcomponent build() {
      if (seedInstance == null) {
        throw new IllegalStateException(MainActivity.class.getCanonicalName() + " must be set");
      }
      return new MainActivitySubcomponentImpl(this);
    }

    @Override
    public void seedInstance(MainActivity arg0) {
      this.seedInstance = Preconditions.checkNotNull(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl
      implements ActivityBuilderModule_MainActivity.MainActivitySubcomponent {
    private Provider<
            FragmentBuilderModule_ContributeArticleListFragment.ArticleListFragmentSubcomponent
                .Builder>
        articleListFragmentSubcomponentBuilderProvider;

    private Provider<
            FragmentBuilderModule_ContributeArticleDetailFragment.ArticleDetailFragmentSubcomponent
                .Builder>
        articleDetailFragmentSubcomponentBuilderProvider;

    private MainActivitySubcomponentImpl(MainActivitySubcomponentBuilder builder) {
      initialize(builder);
    }

    private Map<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
        getMapOfClassOfAndProviderOfFactoryOf() {
      return MapBuilder
          .<Class<? extends Fragment>, Provider<AndroidInjector.Factory<? extends Fragment>>>
              newMapBuilder(2)
          .put(ArticleListFragment.class, (Provider) articleListFragmentSubcomponentBuilderProvider)
          .put(
              ArticleDetailFragment.class,
              (Provider) articleDetailFragmentSubcomponentBuilderProvider)
          .build();
    }

    private DispatchingAndroidInjector<Fragment> getDispatchingAndroidInjectorOfFragment() {
      return DispatchingAndroidInjector_Factory.newDispatchingAndroidInjector(
          getMapOfClassOfAndProviderOfFactoryOf());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final MainActivitySubcomponentBuilder builder) {
      this.articleListFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuilderModule_ContributeArticleListFragment.ArticleListFragmentSubcomponent
                  .Builder>() {
            @Override
            public FragmentBuilderModule_ContributeArticleListFragment
                    .ArticleListFragmentSubcomponent.Builder
                get() {
              return new ArticleListFragmentSubcomponentBuilder();
            }
          };
      this.articleDetailFragmentSubcomponentBuilderProvider =
          new Provider<
              FragmentBuilderModule_ContributeArticleDetailFragment
                  .ArticleDetailFragmentSubcomponent.Builder>() {
            @Override
            public FragmentBuilderModule_ContributeArticleDetailFragment
                    .ArticleDetailFragmentSubcomponent.Builder
                get() {
              return new ArticleDetailFragmentSubcomponentBuilder();
            }
          };
    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseActivity_MembersInjector.injectFragmentAndroidInjector(
          instance, getDispatchingAndroidInjectorOfFragment());
      return instance;
    }

    private final class ArticleListFragmentSubcomponentBuilder
        extends FragmentBuilderModule_ContributeArticleListFragment.ArticleListFragmentSubcomponent
            .Builder {
      private ArticleListFragment seedInstance;

      @Override
      public FragmentBuilderModule_ContributeArticleListFragment.ArticleListFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ArticleListFragment.class.getCanonicalName() + " must be set");
        }
        return new ArticleListFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ArticleListFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ArticleListFragmentSubcomponentImpl
        implements FragmentBuilderModule_ContributeArticleListFragment
            .ArticleListFragmentSubcomponent {
      private ArticleListFragmentSubcomponentImpl(ArticleListFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(ArticleListFragment arg0) {
        injectArticleListFragment(arg0);
      }

      private ArticleListFragment injectArticleListFragment(ArticleListFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }

    private final class ArticleDetailFragmentSubcomponentBuilder
        extends FragmentBuilderModule_ContributeArticleDetailFragment
            .ArticleDetailFragmentSubcomponent.Builder {
      private ArticleDetailFragment seedInstance;

      @Override
      public FragmentBuilderModule_ContributeArticleDetailFragment.ArticleDetailFragmentSubcomponent
          build() {
        if (seedInstance == null) {
          throw new IllegalStateException(
              ArticleDetailFragment.class.getCanonicalName() + " must be set");
        }
        return new ArticleDetailFragmentSubcomponentImpl(this);
      }

      @Override
      public void seedInstance(ArticleDetailFragment arg0) {
        this.seedInstance = Preconditions.checkNotNull(arg0);
      }
    }

    private final class ArticleDetailFragmentSubcomponentImpl
        implements FragmentBuilderModule_ContributeArticleDetailFragment
            .ArticleDetailFragmentSubcomponent {
      private ArticleDetailFragmentSubcomponentImpl(
          ArticleDetailFragmentSubcomponentBuilder builder) {}

      @Override
      public void inject(ArticleDetailFragment arg0) {
        injectArticleDetailFragment(arg0);
      }

      private ArticleDetailFragment injectArticleDetailFragment(ArticleDetailFragment instance) {
        BaseFragment_MembersInjector.injectViewModelFactory(
            instance, DaggerAppComponent.this.viewModelFactoryProvider.get());
        return instance;
      }
    }
  }
}
